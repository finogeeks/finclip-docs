import{_ as e,c as r,a9 as t,o}from"./chunks/framework.BjXht68r.js";const n="/images/prometheus.png",g=JSON.parse('{"title":"监控系统","description":"A guide in my new Starlight docs site.","frontmatter":{"title":"监控系统","description":"A guide in my new Starlight docs site."},"headers":[],"relativePath":"docs/monitoring/monitoring.md","filePath":"docs/monitoring/monitoring.md"}'),i={name:"docs/monitoring/monitoring.md"};function l(s,a,h,m,d,u){return o(),r("div",null,a[0]||(a[0]=[t('<h2 id="系统概述" tabindex="-1">系统概述 <a class="header-anchor" href="#系统概述" aria-label="Permalink to &quot;系统概述&quot;">​</a></h2><p>在私有化部署环境中，监控与告警系统是维护服务稳定运行的关键。我们利用开源组件 Prometheus 进行数据采集和监控，Alertmanager 用于告警管理，Grafana 作为可视化平台，提供实时数据分析和展示。本监控体系为系统运维和开发团队提供了故障发现和预防的强有力支持。</p><h2 id="系统架构" tabindex="-1">系统架构 <a class="header-anchor" href="#系统架构" aria-label="Permalink to &quot;系统架构&quot;">​</a></h2><p>在下图的流程中，Prometheus 通过配置文件指定的服务发现方式（如 ServiceMonitor 和 PodMonitor）确定要拉取监控指标的目标（Target），包括应用容器和 Pushgateway。Prometheus 通过 HTTP 请求访问这些目标的特定端点（Metric Path），将指标数据拉取并持久化到自身的时序数据库（TSDB）中。</p><p>Prometheus 还会周期性地通过 PromQL 计算配置的告警规则，决定是否生成告警并将其发送到 Alertmanager。Alertmanager 接收到告警后负责进行告警通知的分发，发送到邮件或短信等指定渠道。</p><p>此外，Grafana 作为可视化平台，连接 Prometheus 数据源，通过可定制的仪表盘实时展示监控数据。Grafana 支持多种图表类型和交互式数据展示，帮助团队直观地了解系统性能、发现趋势并快速定位问题。</p><p><img src="'+n+'" alt=""></p><h2 id="组件介绍" tabindex="-1">组件介绍 <a class="header-anchor" href="#组件介绍" aria-label="Permalink to &quot;组件介绍&quot;">​</a></h2><h3 id="_1-prometheus" tabindex="-1">1.Prometheus <a class="header-anchor" href="#_1-prometheus" aria-label="Permalink to &quot;1.Prometheus&quot;">​</a></h3><ul><li><strong>功能</strong>：负责采集和存储监控数据。支持多种采集方式，通过 PromQL，可以实现数据的筛选、聚合、计算等操作。</li><li><strong>优点</strong>：数据存储高效、能够满足复杂的监控和分析需求、支持强大的告警规则设定。</li></ul><h3 id="_2-alertmanager" tabindex="-1">2. Alertmanager <a class="header-anchor" href="#_2-alertmanager" aria-label="Permalink to &quot;2. Alertmanager&quot;">​</a></h3><ul><li><strong>功能</strong>：接收来自 Prometheus 的告警，支持分组、去噪、静默等功能，支持多种告警方式。</li><li><strong>优点</strong>：灵活的警报策略、多渠道通知支持、与 Prometheus 紧密集成。</li></ul><h3 id="_3-grafana" tabindex="-1">3. Grafana <a class="header-anchor" href="#_3-grafana" aria-label="Permalink to &quot;3. Grafana&quot;">​</a></h3><ul><li><strong>功能</strong>：将监控数据可视化，支持创建多种不同的仪表盘，如折线图、柱状图、饼图、热图等。</li><li><strong>优点</strong>：多数据源支持、可视化功能强大、插件生态系统丰富、易于使用和配置。</li></ul><h2 id="示例场景" tabindex="-1">示例场景 <a class="header-anchor" href="#示例场景" aria-label="Permalink to &quot;示例场景&quot;">​</a></h2><h3 id="场景-1-cpu-使用率告警" tabindex="-1">场景 1：CPU 使用率告警 <a class="header-anchor" href="#场景-1-cpu-使用率告警" aria-label="Permalink to &quot;场景 1：CPU 使用率告警&quot;">​</a></h3><p>设置告警规则，当应用服务的 CPU 使用率持续超过 90% 超过 5 分钟时，触发告警并通过 Alertmanager 发送邮件或短信到指定渠道。</p><h3 id="场景-2-服务异常重启监控" tabindex="-1">场景 2：服务异常重启监控 <a class="header-anchor" href="#场景-2-服务异常重启监控" aria-label="Permalink to &quot;场景 2：服务异常重启监控&quot;">​</a></h3><p>配置监控规则，当某服务在一定时间内频繁重启时，触发中等告警，通知运维人员检查相关服务。</p><h3 id="场景-3-内存泄漏排查" tabindex="-1">场景 3：内存泄漏排查 <a class="header-anchor" href="#场景-3-内存泄漏排查" aria-label="Permalink to &quot;场景 3：内存泄漏排查&quot;">​</a></h3><p>在 Grafana 中创建内存使用仪表盘，设置可视化图表，展示每个服务的内存使用趋势，并标记告警线。</p>',21)]))}const p=e(i,[["render",l]]);export{g as __pageData,p as default};
